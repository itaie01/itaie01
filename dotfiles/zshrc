source ~/DOTFILES/zsh-autocomplete/zsh-autocomplete.plugin.zsh

fpath+=~/DOTFILES/typewritten
autoload -U promptinit; promptinit
prompt typewritten
# TYPEWRITTEN_PROMPT_LAYOUT="pure"

# Purification
# by Matthieu Cneude
# https://github.com/Phantas0s/purification

# Based on:

# Purity
# by Kevin Lanni
# https://github.com/therealklanni/purity
# MIT License

# prompt:
# %F => color dict
# %f => reset color
# %~ => current path
# %* => time
# %n => username
# %m => shortname host
# %(?..) => prompt conditional - %(condition.true.false)

# Display git status
# TODO to refactor with switch / using someting else than grep
# Might be faster using ripgrep too
# git_prompt_status() {
#   local INDEX STATUS

#   INDEX=$(command git status --porcelain -b 2> /dev/null)

#   STATUS=""

#   if $(echo "$INDEX" | command grep -E '^\?\? ' &> /dev/null); then
#     STATUS="$ZSH_THEME_GIT_PROMPT_UNTRACKED$STATUS"
#   fi

#   if $(echo "$INDEX" | grep '^A  ' &> /dev/null); then
#     STATUS="$ZSH_THEME_GIT_PROMPT_ADDED$STATUS"
#   elif $(echo "$INDEX" | grep '^M  ' &> /dev/null); then
#     STATUS="$ZSH_THEME_GIT_PROMPT_ADDED$STATUS"
#   elif $(echo "$INDEX" | grep '^MM ' &> /dev/null); then
#     STATUS="$ZSH_THEME_GIT_PROMPT_ADDED$STATUS"
#   fi

#   if $(echo "$INDEX" | grep '^ M ' &> /dev/null); then
#     STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
#   elif $(echo "$INDEX" | grep '^AM ' &> /dev/null); then
#     STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
#   elif $(echo "$INDEX" | grep '^MM ' &> /dev/null); then
#     STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
#   elif $(echo "$INDEX" | grep '^ T ' &> /dev/null); then
#     STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
#   fi

#   if $(echo "$INDEX" | grep '^R  ' &> /dev/null); then
#     STATUS="$ZSH_THEME_GIT_PROMPT_RENAMED$STATUS"
#   fi

#   if $(echo "$INDEX" | grep '^ D ' &> /dev/null); then
#     STATUS="$ZSH_THEME_GIT_PROMPT_DELETED$STATUS"
#   elif $(echo "$INDEX" | grep '^D  ' &> /dev/null); then
#     STATUS="$ZSH_THEME_GIT_PROMPT_DELETED$STATUS"
#   elif $(echo "$INDEX" | grep '^AD ' &> /dev/null); then
#     STATUS="$ZSH_THEME_GIT_PROMPT_DELETED$STATUS"
#   fi

#   if $(command git rev-parse --verify refs/stash >/dev/null 2>&1); then
#     STATUS="$ZSH_THEME_GIT_PROMPT_STASHED$STATUS"
#   fi

#   if $(echo "$INDEX" | grep '^UU ' &> /dev/null); then
#     STATUS="$ZSH_THEME_GIT_PROMPT_UNMERGED$STATUS"
#   fi

#   if $(echo "$INDEX" | grep '^## [^ ]\+ .*ahead' &> /dev/null); then
#     STATUS="$ZSH_THEME_GIT_PROMPT_AHEAD$STATUS"
#   fi

#   if $(echo "$INDEX" | grep '^## [^ ]\+ .*behind' &> /dev/null); then
#     STATUS="$ZSH_THEME_GIT_PROMPT_BEHIND$STATUS"
#   fi

#   if $(echo "$INDEX" | grep '^## [^ ]\+ .*diverged' &> /dev/null); then
#     STATUS="$ZSH_THEME_GIT_PROMPT_DIVERGED$STATUS"
#   fi

#   if [[ ! -z "$STATUS" ]]; then
#     echo " [ $STATUS]"
#   fi
# }

# prompt_git_branch() {
#     autoload -Uz vcs_info 
#     precmd_vcs_info() { vcs_info }
#     precmd_functions+=( precmd_vcs_info )
#     setopt prompt_subst
#     zstyle ':vcs_info:git:*' formats '%b'
# }

# prompt_git_info() {
#     [ ! -z "$vcs_info_msg_0_" ] && echo "$ZSH_THEME_GIT_PROMPT_PREFIX%F{white}$vcs_info_msg_0_%f$ZSH_THEME_GIT_PROMPT_SUFFIX"
# }

# prompt_purity_precmd() {
#     # Pass a line before each prompt
#     print -P ''
# }

# prompt_purification_setup() {
#     # Display git branch

#     autoload -Uz add-zsh-hook
#     add-zsh-hook precmd prompt_purity_precmd

#     ZSH_THEME_GIT_PROMPT_PREFIX=" %F{red}λ%f:"
#     ZSH_THEME_GIT_PROMPT_DIRTY=""
#     ZSH_THEME_GIT_PROMPT_CLEAN=""

#     ZSH_THEME_GIT_PROMPT_ADDED="%F{green}+%f "
#     ZSH_THEME_GIT_PROMPT_MODIFIED="%F{blue}%f "
#     ZSH_THEME_GIT_PROMPT_DELETED="%F{red}x%f "
#     ZSH_THEME_GIT_PROMPT_RENAMED="%F{magenta}➜%f "
#     ZSH_THEME_GIT_PROMPT_UNMERGED="%F{yellow}═%f "
#     ZSH_THEME_GIT_PROMPT_UNTRACKED="%F{white}%f "
#     ZSH_THEME_GIT_PROMPT_STASHED="%B%F{red}%f%b "
#     ZSH_THEME_GIT_PROMPT_BEHIND="%B%F{red}%f%b "
#     ZSH_THEME_GIT_PROMPT_AHEAD="%B%F{green}%f%b "

#     prompt_git_branch
#     RPROMPT='$(prompt_git_info) $(git_prompt_status)'
#     PROMPT=$'%F{white}%~ %B%F{blue}❯%f%b '
# }

# prompt_purification_setup

export PATH="~/.local/bin:$PATH"
export PATH="/opt/homebrew/opt/coreutils/libexec/gnubin:$PATH"
export PATH="/usr/local/texlive/2023basic/bin/universal-darwin:$PATH"
export PATH="/Users/itai-epstein/.local/bin:$PATH",
export PATH="/opt/homebrew/Caskroom/miniforge/base/bin:$PATH"


alias ls="eza --icons --tree --level=1"
alias ll="ls -l"
alias pn="pnpm"
alias c="code"

eval "$(/opt/homebrew/bin/brew shellenv)"
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

source ~/DOTFILES/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source ~/DOTFILES/fzf-tab/fzf-tab.plugin.zsh
source ~/DOTFILES/zsh-autosuggestions/zsh-autosuggestions.zsh
source ~/DOTFILES/zsh-nvm/zsh-nvm.plugin.zsh
source ~/DOTFILES/zsh-history-substring-search/zsh-history-substring-search.zsh

bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

# Add any commands which depend on conda here
lazy_conda_aliases=('python' 'conda')

load_conda() {
  for lazy_conda_alias in $lazy_conda_aliases
  do
    unalias $lazy_conda_alias
  done

  __conda_prefix="$HOME/.miniconda3" # Set your conda Location

  # >>> conda initialize >>>
    # !! Contents within this block are managed by 'conda init' !!
    __conda_setup="$('/opt/homebrew/Caskroom/miniforge/base/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "/opt/homebrew/Caskroom/miniforge/base/etc/profile.d/conda.sh" ]; then
            . "/opt/homebrew/Caskroom/miniforge/base/etc/profile.d/conda.sh"
        else
            export PATH="/opt/homebrew/Caskroom/miniforge/base/bin:$PATH"
        fi
    fi
    unset __conda_setup
    # <<< conda initialize <<<

  unset __conda_prefix
  unfunction load_conda
}

for lazy_conda_alias in $lazy_conda_aliases
do
  alias $lazy_conda_alias="load_conda && $lazy_conda_alias"
done

